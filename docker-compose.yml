version: "3.3"
services:
  db_mysql:
    image: mysql
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=mongo-db # database name you want to make
      - MONGO_INITDB_ROOT_USERNAME=username # set your container root username
      - MONGO_INITDB_ROOT_PASSWORD=password # set your container root password
    volumes:
      - my-mongo:/data/db
    ports:
      - 27017:27017
      
  # nginx_load_balancer:
  #   image: nginx
  #   volumes:
  #     - './nginx/default.conf:/etc/nginx/nginx.conf'
  #   ports:
  #     - '8080:80'
  # app1:
  #   image: node-app
  #   environment: 
  #     - APPID=1111
  # app2:
  #   image: node-app
  #   environment: 
  #     - APPID=2222
  
  # nginx:
  #   build:
  #     context: ./nginx
  #   container_name: nginx
  #   hostname: nginx
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - micro_map

  # reverse-proxy:
  #   image: traefik:latest
  #   container_name: "traefik"
  #   restart: always
  #   command:
  #     - "--api.insecure=true"
  #     - "--api.dashboard=true"
  #     - "--providers.docker=true"
  #     - "--log.level=DEBUG"
  #     - "--providers.docker"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--providers.docker.network=web"
  #     - "--entrypoints.web.address=:80"
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #     - "443:443"
  #   networks:
  #     - web
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #   labels:
  #     - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
  #     - "traefik.http.routers.micromap.rule=Host(`monitor.example.com`)" # <== Setting the domain for the dashboard
  #     - "traefik.http.routers.micromap.service=api@internal" # <== Enabling the api to be a service

  # micromap:
  #   container_name: micromap
  #   build:
  #     context: ./microservices/map
  #   image: micromap
  #   networks:
  #     - web
  #   ports: 
  #     - "3040"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.micromap.rule=Host(`rogermange.test`)"
  #     - "traefik.http.routers.micromap.entrypoints=web"
  #   # volumes: 
  #   #   - ./microservices/map:/app
  #   #   - /app/node_modules
  #   depends_on: 
  #     - reverse-proxy
    

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
    depends_on:
      - mysql
    ports:
      - "8068"

  flask:
    build: ./microservices/map/python_api/flask
    container_name: flask
    restart: always
    environment: 
      - APP_NAME=MyFlaskApp
      - DB_USERNAME=example
    expose: 
      - 8181
    
  nginx_python:
    build: ./microservices/map/python_api/nginx
    container_name: nginx_python
    restart: always
    ports: 
      - "81:81"
    
# Names our volume
volumes:
  my-db:
  my-mongo:

networks:
  web:
    external: true